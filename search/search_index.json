{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Policies Per AWS Service","text":""},{"location":"#aws-appsync","title":"AWS AppSync","text":"<ul> <li>enable-at-rest-encryption AWS AppSync API caches should be encrypted at rest</li> <li>enable-in-transit-encryption AWS AppSync API caches should be encrypted in transit</li> </ul>"},{"location":"#amazon-api-gateway-v2","title":"Amazon API Gateway V2","text":"<ul> <li>enable-access-logs Access logging should be configured for API Gateway V2 Stages</li> </ul>"},{"location":"#amazon-athena","title":"Amazon Athena","text":"<ul> <li>enable-logging Athena workgroups should have logging enabled</li> </ul>"},{"location":"#database-migration-service","title":"Database Migration Service","text":"<ul> <li>enable-auto-minor-version-upgrade DMS replication instances should have automatic minor version upgrade enabled</li> <li>use-ssl DMS endpoints should use SSL</li> <li>disable-public-access Database Migration Service replication instances should not be public</li> </ul>"},{"location":"#dynamodb","title":"DynamoDB","text":"<ul> <li> <p>enable-dax-at-rest-encryption Amazon DynamoDB Accelerator (DAX) clusters should be encrypted at rest</p> </li> <li> <p>enable-dax-in-transit-encryption Amazon DynamoDB Accelerator (DAX) clusters should be encrypted in transit</p> </li> </ul>"},{"location":"#elastic-file-system","title":"Elastic File System","text":"<ul> <li>enable-at-rest-encryption Elastic File Systems should be configured to encrypt data at-rest using AWS KMS</li> </ul>"},{"location":"#amazon-eventbridge","title":"Amazon EventBridge","text":"<ul> <li>attach-resource-based-policy EventBridge custom event buses should have a resource-based policy attached</li> </ul>"},{"location":"#amazon-ecr","title":"Amazon ECR","text":"<ul> <li>enable-private-image-scanning ECR private repositories should have image scanning configured</li> <li>configure-private-lifecycle-policy ECR repositories should have at least one lifecycle policy configured</li> </ul>"},{"location":"#amazon-ecs","title":"Amazon ECS","text":"<ul> <li>enable-container-insights ECS clusters should use Container Insights</li> <li>disable-taskset-assign-public-ip ECS task sets should not automatically assign public IP addresses</li> </ul>"},{"location":"#amazon-elasticache","title":"Amazon ElastiCache","text":"<ul> <li>enable-auto-minor-version-upgrade ElastiCache clusters should have automatic minor version upgrades enabled</li> </ul>"},{"location":"#aws-glue","title":"AWS Glue","text":"<ul> <li>spark-job-supported-version AWS Glue Spark jobs should run on supported versions of AWS Glue</li> </ul>"},{"location":"#kinesis-data-streams","title":"Kinesis Data Streams","text":"<ul> <li>enable-server-side-encryption Kinesis streams should be encrypted at rest</li> </ul>"},{"location":"#aws-kms","title":"AWS KMS","text":"<ul> <li>enable-key-rotation AWS KMS key rotation should be enabled</li> </ul>"},{"location":"#amazon-mq","title":"Amazon MQ","text":"<ul> <li>enable-auto-minor-version-upgrade Amazon MQ brokers should have automatic minor version upgrade enabled</li> </ul>"},{"location":"#amazon-neptune","title":"Amazon Neptune","text":"<ul> <li>enable-copy-tags-to-snapshots Neptune DB clusters should be configured to copy tags to snapshots</li> </ul>"},{"location":"#amazon-opensearch","title":"Amazon OpenSearch","text":"<ul> <li>enable-node-to-node-encryption OpenSearch domains should encrypt data sent between nodes</li> </ul>"},{"location":"#amazon-redshift","title":"Amazon Redshift","text":"<ul> <li>disable-public-access Amazon Redshift clusters should prohibit public access</li> <li>enable-version-upgrade Amazon Redshift should have automatic upgrades to major versions enabled</li> </ul>"},{"location":"#amazon-kinesis-data-firehose","title":"Amazon Kinesis Data Firehose","text":"<ul> <li>enable-server-side-encryption Firehose delivery streams should be encrypted at rest using AWS KMS</li> </ul>"},{"location":"#amazon-relational-database-service","title":"Amazon Relational Database Service","text":"<ul> <li>enable-auto-minor-version-upgrade RDS automatic minor version upgrades should be enabled</li> </ul>"},{"location":"#amazon-sqs","title":"Amazon SQS","text":"<ul> <li>enable-at-rest-encryption Amazon SQS queues should be encrypted at rest</li> </ul>"},{"location":"#aws-step-functions","title":"AWS Step Functions","text":"<ul> <li>enable-logging Step Functions state machines should have logging turned on</li> </ul>"},{"location":"policies/apigatewayv2-enable-access-logs/","title":"Access logging should be configured for API Gateway V2 Stages","text":""},{"location":"policies/apigatewayv2-enable-access-logs/#identifier","title":"Identifier","text":"<p>apigatewayv2-enable-access-logs</p>"},{"location":"policies/apigatewayv2-enable-access-logs/#category","title":"Category","text":"<p>Identify &gt; Logging</p>"},{"location":"policies/apigatewayv2-enable-access-logs/#description","title":"Description","text":"<p>This control checks whether Amazon API Gateway v2 (HTTP or WebSocket APIs) has access logging enabled. Access logs provide visibility into client requests and help with troubleshooting, auditing, and threat detection. This is verified by ensuring the <code>access_log_settings</code> block is defined in the Terraform configuration for the <code>aws_apigatewayv2_stage</code> resource.</p>"},{"location":"policies/apigatewayv2-enable-access-logs/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_apigatewayv2_api\" \"foo\" {\n  name          = \"example-http-api\"\n  protocol_type = \"HTTP\"\n}\n\nresource \"aws_apigatewayv2_stage\" \"foo\" {\n  api_id      = aws_apigatewayv2_api.foo.id\n  name        = \"dev\"\n  auto_deploy = true\n}\n</code></pre>"},{"location":"policies/apigatewayv2-enable-access-logs/#remediation","title":"Remediation","text":"<p>To fix this violation, configure access logging by defining the access_log_settings block and specifying a valid CloudWatch Logs destination ARN and log format:</p> Terraform<pre><code>resource \"aws_apigatewayv2_api\" \"foo\" {\n  name          = \"example-http-api\"\n  protocol_type = \"HTTP\"\n}\n\nresource \"aws_apigatewayv2_stage\" \"foo\" {\n  api_id      = aws_apigatewayv2_api.foo.id\n  name        = \"dev\"\n  auto_deploy = true\n  access_log_settings {\n    destination_arn = aws_cloudwatch_log_group.log_group.arn\n    format = jsonencode({\n      \"requestId\" : \"$context.requestId\",\n      \"ip\" : \"$context.identity.sourceIp\",\n      \"requestTime\" : \"$context.requestTime\",\n      \"httpMethod\" : \"$context.httpMethod\",\n      \"routeKey\" : \"$context.routeKey\",\n      \"status\" : \"$context.status\",\n      \"protocol\" : \"$context.protocol\",\n      \"responseLength\" : \"$context.responseLength\"\n    })\n  }\n}\n</code></pre>"},{"location":"policies/apigatewayv2-enable-access-logs/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/apigateway-controls.html#apigateway-9</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_stage#access_log_settings</li> <li>https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html</li> </ul>"},{"location":"policies/appsync-enable-at-rest-encryption/","title":"AWS AppSync API caches should be encrypted at rest","text":""},{"location":"policies/appsync-enable-at-rest-encryption/#identifier","title":"Identifier","text":"<p>appsync-enable-at-rest-encryption</p>"},{"location":"policies/appsync-enable-at-rest-encryption/#category","title":"Category","text":"<p>Protect &gt; Data Protection &gt; Encryption of data-at-rest</p>"},{"location":"policies/appsync-enable-at-rest-encryption/#description","title":"Description","text":"<p>This control checks whether AWS AppSync API caches are configured to use encryption at rest. Enabling encryption at rest for AppSync API caching ensures that cached data is protected from unauthorized access while stored in memory.</p> <p>AppSync API caching is backed by AWS ElastiCache for Redis. When enabled, encryption at rest can be enforced by setting the <code>at_rest_encryption_enabled</code> flag to <code>true</code> in the Terraform <code>aws_appsync_api_cache</code> resource.</p>"},{"location":"policies/appsync-enable-at-rest-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_appsync_api_cache\" \"foo\" {\n  api_id                        = aws_appsync_graphql_api.foo.id\n  api_caching_behavior       = \"FULL_REQUEST_CACHING\"\n  type                       = \"LARGE\"\n  ttl                        = 500\n}\n</code></pre>"},{"location":"policies/appsync-enable-at-rest-encryption/#remediation","title":"Remediation","text":"<p>To ensure cache encryption at rest, set <code>at_rest_encryption_enabled = true</code>:</p> Terraform<pre><code>resource \"aws_appsync_api_cache\" \"foo\" {\n  api_id                        = aws_appsync_graphql_api.foo.id\n  api_caching_behavior       = \"FULL_REQUEST_CACHING\"\n  type                       = \"LARGE\"\n  ttl                        = 500\n  at_rest_encryption_enabled = true\n}\n</code></pre>"},{"location":"policies/appsync-enable-at-rest-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/appsync-controls.html#appsync-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/appsync_api_cache#at_rest_encryption_enabled</li> <li>https://docs.aws.amazon.com/appsync/latest/devguide/data-protection.html</li> </ul>"},{"location":"policies/appsync-enable-in-transit-encryption/","title":"AWS AppSync API caches should be encrypted in transit","text":""},{"location":"policies/appsync-enable-in-transit-encryption/#identifier","title":"Identifier","text":"<p>appsync-enable-in-transit-encryption</p>"},{"location":"policies/appsync-enable-in-transit-encryption/#category","title":"Category","text":"<p>Protect &gt; Data Protection &gt; Encryption of data-in-transit</p>"},{"location":"policies/appsync-enable-in-transit-encryption/#description","title":"Description","text":"<p>This control checks whether AWS AppSync API caches have encryption in transit enabled. Enabling encryption in transit protects data as it moves between the AppSync service and the underlying cache (ElastiCache for Redis), reducing the risk of data interception or tampering during transmission.</p> <p>In Terraform, this is enforced using the <code>transit_encryption_enabled = true</code> setting in the <code>aws_appsync_api_cache</code> resource.</p>"},{"location":"policies/appsync-enable-in-transit-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_appsync_api_cache\" \"foo\" {\n  api_id                        = aws_appsync_graphql_api.foo.id\n  api_caching_behavior       = \"FULL_REQUEST_CACHING\"\n  type                       = \"LARGE\"\n  ttl                        = 500\n}\n</code></pre>"},{"location":"policies/appsync-enable-in-transit-encryption/#remediation","title":"Remediation","text":"<p>To ensure cache encryption at rest, set <code>transit_encryption_enabled  = true</code>:</p> Terraform<pre><code>resource \"aws_appsync_api_cache\" \"foo\" {\n  api_id                        = aws_appsync_graphql_api.foo.id\n  api_caching_behavior       = \"FULL_REQUEST_CACHING\"\n  type                       = \"LARGE\"\n  ttl                        = 500\n  transit_encryption_enabled  = true\n}\n</code></pre>"},{"location":"policies/appsync-enable-in-transit-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/appsync-controls.html#appsync-6</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/appsync_api_cache#transit_encryption_enabled</li> <li>https://docs.aws.amazon.com/appsync/latest/devguide/data-protection.html</li> </ul>"},{"location":"policies/athena-enable-logging/","title":"Athena workgroups should have logging enabled","text":""},{"location":"policies/athena-enable-logging/#identifier","title":"Identifier","text":"<p>athena-enable-logging</p>"},{"location":"policies/athena-enable-logging/#category","title":"Category","text":"<p>Identify &gt; Logging</p>"},{"location":"policies/athena-enable-logging/#description","title":"Description","text":"<p>This control checks whether Amazon Athena workgroups have CloudWatch metrics publishing enabled. Enabling CloudWatch metrics allows you to monitor Athena query performance and usage through metrics like <code>QuerySucceeded</code>, <code>QueryFailed</code>, and <code>ProcessedBytes</code>. This enhances observability and helps detect unusual query activity or performance issues.</p>"},{"location":"policies/athena-enable-logging/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_athena_workgroup\" \"foo\" {\n    name = \"foo\"\n    configuration {\n        enforce_workgroup_configuration    = true\n        publish_cloudwatch_metrics_enabled = false\n    }\n}\n</code></pre>"},{"location":"policies/athena-enable-logging/#remediation","title":"Remediation","text":"<p>To fix this violation, enable CloudWatch metrics by setting <code>publish_cloudwatch_metrics_enabled = true</code> in the Athena workgroup configuration:</p> Terraform<pre><code>resource \"aws_athena_workgroup\" \"foo\" {\n    name = \"foo\"\n    configuration {\n        enforce_workgroup_configuration    = true\n        publish_cloudwatch_metrics_enabled = true\n    }\n}\n</code></pre>"},{"location":"policies/athena-enable-logging/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/athena-controls.html#athena-4</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/athena_workgroup#publish_cloudwatch_metrics_enabled</li> <li>https://docs.aws.amazon.com/athena/latest/ug/athena-cloudwatch-metrics-enable.html</li> </ul>"},{"location":"policies/dms-disable-public-access/","title":"Database Migration Service replication instances should not be public","text":""},{"location":"policies/dms-disable-public-access/#identifier","title":"Identifier","text":"<p>dms-disable-public-access</p>"},{"location":"policies/dms-disable-public-access/#category","title":"Category","text":"<p>Protect &gt; Secure network configuration</p>"},{"location":"policies/dms-disable-public-access/#description","title":"Description","text":"<p>This control checks whether AWS Database Migration Service (DMS) replication instances are not publicly accessible. Disabling public access helps reduce exposure to the internet and lowers the risk of unauthorized access or data breaches.</p> <p>DMS replication instances should reside in private subnets with controlled access via security groups and VPC configurations. In Terraform, this is enforced by setting <code>publicly_accessible = false</code> in the <code>aws_dms_replication_instance</code> resource.</p>"},{"location":"policies/dms-disable-public-access/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_dms_replication_instance\" \"foo\" {\n  replication_instance_class   = \"dms.t2.large\"\n  replication_instance_id      = \"dms-replication-instance\"\n  publicly_accessible          = true\n  ...\n}\n</code></pre>"},{"location":"policies/dms-disable-public-access/#remediation","title":"Remediation","text":"<p>To fix this violation, set <code>publicly_accessible = false</code>:</p> Terraform<pre><code>resource \"aws_dms_replication_instance\" \"compliant\" {\n  replication_instance_class   = \"dms.t2.large\"\n  replication_instance_id      = \"dms-replication-instance\"\n  publicly_accessible          = false\n  ...\n}\n</code></pre>"},{"location":"policies/dms-disable-public-access/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/dms-controls.html#dms-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dms_replication_instance#publicly_accessible</li> <li>https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Creating.html</li> </ul>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/","title":"DMS replication instances should have automatic minor version upgrade enabled","text":""},{"location":"policies/dms-enable-auto-minor-version-upgrade/#identifier","title":"Identifier","text":"<p>athena-enable-logging</p>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/#description","title":"Description","text":"<p>This control checks whether AWS Database Migration Service (DMS) replication instances have automatic minor version upgrades enabled. Enabling this feature ensures that the replication instance automatically receives the latest minor engine version updates, which include important security patches and stability improvements.</p> <p>This is enforced by setting <code>auto_minor_version_upgrade = true</code> in the Terraform configuration of the <code>aws_dms_replication_instance</code> resource.</p>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_dms_replication_instance\" \"foo\" {\n  replication_instance_class   = \"dms.t2.large\"\n  replication_instance_id      = \"foo\"\n  auto_minor_version_upgrade = false\n  ...\n}\n</code></pre>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/#remediation","title":"Remediation","text":"<p>To fix this violation, enable automatic minor version upgrades by setting <code>auto_minor_version_upgrade = true</code>:</p> Terraform<pre><code>resource \"aws_dms_replication_instance\" \"foo\" {\n  replication_instance_class   = \"dms.t2.large\"\n  replication_instance_id      = \"foo\"\n  auto_minor_version_upgrade = true\n  ...\n}\n</code></pre>"},{"location":"policies/dms-enable-auto-minor-version-upgrade/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/dms-controls.html#dms-6</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dms_replication_instance#auto_minor_version_upgrade</li> <li>https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Creating.html</li> </ul>"},{"location":"policies/dms-use-ssl/","title":"DMS endpoints should use SSL","text":""},{"location":"policies/dms-use-ssl/#identifier","title":"Identifier","text":"<p>dms-use-ssl</p>"},{"location":"policies/dms-use-ssl/#category","title":"Category","text":"<p>Protect &gt; Data Protection &gt; Encryption of data-in-transit</p>"},{"location":"policies/dms-use-ssl/#description","title":"Description","text":"<p>This control checks whether AWS Database Migration Service (DMS) endpoints are configured to use SSL (Secure Sockets Layer) for encrypting data in transit between the DMS replication instance and the source or target database.</p> <p>Encrypting data in transit ensures that sensitive information such as credentials, schema, and migrated data is protected from eavesdropping and man-in-the-middle attacks. The SSL configuration is specified using the <code>ssl_mode</code> attribute in the Terraform configuration of the <code>aws_dms_endpoint</code> resource.</p>"},{"location":"policies/dms-use-ssl/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_dms_endpoint\" \"foo\" {\n  endpoint_id     = \"foo\"\n  endpoint_type   = \"source\"\n  engine_name     = \"aurora\"\n  port            = 3306\n  kms_key_arn     = \"arn:aws:kms:us-east-1:123412341234:key/abcdabcd-abcd-abcd-abcd-abcdabcdabcd\"\n  ssl_mode        = \"none\"\n}\n</code></pre>"},{"location":"policies/dms-use-ssl/#remediation","title":"Remediation","text":"<p>To enforce secure connections, set <code>ssl_mode = \"require\"</code> or a stronger mode supported by your database engine: Terraform<pre><code>resource \"aws_dms_endpoint\" \"foo\" {\n  endpoint_id     = \"foo\"\n  endpoint_type   = \"source\"\n  engine_name     = \"aurora\"\n  port            = 3306\n  kms_key_arn     = \"arn:aws:kms:us-east-1:123412341234:key/abcdabcd-abcd-abcd-abcd-abcdabcdabcd\"\n  ssl_mode        = \"require\"\n}\n</code></pre></p>"},{"location":"policies/dms-use-ssl/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/dms-controls.html#dms-9</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dms_endpoint#ssl_mode</li> <li>https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Endpoints.Creating.html</li> </ul>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/","title":"Amazon DynamoDB Accelerator (DAX) clusters should be encrypted at rest","text":""},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#identifier","title":"Identifier","text":"<p>dynamodb-dax-enable-at-rest-encryption</p>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#description","title":"Description","text":"<p>This control checks whether an Amazon DynamoDB Accelerator (DAX) cluster is encrypted at rest, by verifying that the <code>server_side_encryption.enabled</code> is set to <code>true</code> in the Terraform configuration.</p>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_dax_cluster\" \"foo\" {\n  cluster_name       = \"cluster-example-1\"\n  iam_role_arn       = data.aws_iam_role.example.arn\n  node_type          = \"dax.r4.large\"\n  replication_factor = 1\n}\n\nresource \"aws_dax_cluster\" \"bar\" {\n  cluster_name       = \"cluster-example-2\"\n  iam_role_arn       = data.aws_iam_role.example.arn\n  node_type          = \"dax.r4.large\"\n  replication_factor = 1\n  server_side_encryption {\n    enabled = false\n  }\n}\n</code></pre>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#remediation","title":"Remediation","text":"<p>To fix this violation, set the encryption type explicitly in your Terraform configuration: Terraform<pre><code>resource \"aws_dax_cluster\" \"foo\" {\n  cluster_name       = \"cluster-compliant\"\n  iam_role_arn       = data.aws_iam_role.example.arn\n  node_type          = \"dax.r4.large\"\n  replication_factor = 1\n  server_side_encryption {\n    enabled = true\n  }\n}\n</code></pre></p>"},{"location":"policies/dynamodb-dax-enable-at-rest-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/dynamodb-controls.html#dynamodb-3</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dax_cluster</li> <li>https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAXEncryptionAtRest.html</li> </ul>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/","title":"Amazon DynamoDB Accelerator Clusters should have encryption in transit enabled","text":""},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#identifier","title":"Identifier","text":"<p>dynamodb-dax-enable-in-transit-encryption</p>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data in transit</p>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#description","title":"Description","text":"<p>This control checks whether an Amazon DynamoDB Accelerator (DAX) cluster is encrypted in transit, by verifying that the <code>cluster_endpoint_encryption_type</code> is set to <code>\"TLS\"</code> in the Terraform configuration.</p> <p>The control fails if: - The <code>cluster_endpoint_encryption_type</code> attribute is missing or its value is anything other than <code>\"TLS\"</code>.</p>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_dax_cluster\" \"foo\" {\n  cluster_name       = \"cluster-example-1\"\n  iam_role_arn       = data.aws_iam_role.example.arn\n  node_type          = \"dax.r4.large\"\n}\n\nresource \"aws_dax_cluster\" \"bar\" {\n  cluster_name       = \"cluster-example-2\"\n  iam_role_arn       = data.aws_iam_role.example.arn\n  node_type          = \"dax.r4.large\"\n  cluster_endpoint_encryption_type = \"NONE\"\n}\n</code></pre>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#remediation","title":"Remediation","text":"<p>To fix this violation, set the encryption type explicitly in your Terraform configuration:</p> Terraform<pre><code>resource \"aws_dax_cluster\" \"example\" {\n  ...\n  cluster_endpoint_encryption_type = \"TLS\"\n}\n</code></pre>"},{"location":"policies/dynamodb-dax-enable-in-transit-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/dynamodb-controls.html#dynamodb-7</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dax_cluster</li> <li>https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAXEncryptionInTransit.html</li> </ul>"},{"location":"policies/ecr-configure-private-lifecycle-policy/","title":"ECR repositories should have at least one lifecycle policy configured","text":""},{"location":"policies/ecr-configure-private-lifecycle-policy/#identifier","title":"Identifier","text":"<p>ecr-configure-private-lifecycle-policy</p>"},{"location":"policies/ecr-configure-private-lifecycle-policy/#category","title":"Category","text":"<p>Identify &gt; Resource configuration</p>"},{"location":"policies/ecr-configure-private-lifecycle-policy/#description","title":"Description","text":"<p>This control checks whether Amazon Elastic Container Registry (ECR) private repositories have lifecycle policies configured. Lifecycle policies help manage image storage by automatically expiring unused or old container images. This reduces costs, improves organization, and lowers the risk of deploying outdated images. The check verifies that a <code>aws_ecr_lifecycle_policy</code> resource is associated with each <code>aws_ecr_repository</code>.</p>"},{"location":"policies/ecr-configure-private-lifecycle-policy/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_ecr_repository\" \"foo\" {\n    name = \"foo\"\n    image_scanning_configuration {\n        scan_on_push = true\n    }\n}\n</code></pre>"},{"location":"policies/ecr-configure-private-lifecycle-policy/#remediation","title":"Remediation","text":"<p>To fix this violation, define a lifecycle policy using the <code>aws_ecr_lifecycle_policy</code> resource. For example, retain only the 10 most recent images tagged with \"prod\" and expire untagged images after 14 days: Terraform<pre><code>resource \"aws_ecr_repository\" \"foo\" {\n    name = \"foo\"\n    image_scanning_configuration {\n        scan_on_push = true\n    }\n}\nresource \"aws_ecr_lifecycle_policy\" \"foo_policy\" {\n    repository = aws_ecr_repository.foo.name\n\n    policy = &lt;&lt;EOF\n    {\n    \"rules\": [\n        {\n            \"rulePriority\": 1,\n            \"description\": \"Keep last 30 images\",\n            \"selection\": {\n                \"tagStatus\": \"tagged\",\n                \"tagPrefixList\": [\"v\"],\n                \"countType\": \"imageCountMoreThan\",\n                \"countNumber\": 30\n            },\n            \"action\": {\n                \"type\": \"expire\"\n            }\n        }\n    ]\n    }\n    EOF\n    ...\n}\n</code></pre></p>"},{"location":"policies/ecr-configure-private-lifecycle-policy/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/ecr-controls.html#ecr-3</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy</li> <li>https://docs.aws.amazon.com/AmazonECR/latest/userguide/lpp_creation.html</li> </ul>"},{"location":"policies/ecr-enable-private-image-scanning/","title":"ECR private repositories should have image scanning configured","text":""},{"location":"policies/ecr-enable-private-image-scanning/#identifier","title":"Identifier","text":"<p>ecr-enable-private-image-scanning</p>"},{"location":"policies/ecr-enable-private-image-scanning/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/ecr-enable-private-image-scanning/#description","title":"Description","text":"<p>This control checks whether Amazon Elastic Container Registry (ECR) private repositories have enhanced image scanning enabled. Enhanced scanning allows for deeper vulnerability analysis using Amazon Inspector. This ensures container images are continuously monitored for known security issues. The check verifies that <code>image_scanning_configuration.scan_on_push</code> is set to <code>true</code> in the Terraform configuration for the <code>aws_ecr_repository</code> resource.</p>"},{"location":"policies/ecr-enable-private-image-scanning/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_ecr_repository\" \"foo\" {\n    name = \"foo\"\n    ...\n}\n</code></pre>"},{"location":"policies/ecr-enable-private-image-scanning/#remediation","title":"Remediation","text":"<p>To fix this violation, enable enhanced image scanning by setting <code>scan_on_push = true</code>: Terraform<pre><code>resource \"aws_ecr_repository\" \"foo\" {\n    name = \"foo\"\n    image_scanning_configuration {\n        scan_on_push = true\n    }\n    ...\n}\n</code></pre></p>"},{"location":"policies/ecr-enable-private-image-scanning/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/ecr-controls.html#ecr-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository</li> <li>https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html</li> </ul>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/","title":"ECS task sets should not automatically assign public IP addresses","text":""},{"location":"policies/ecs-disable-taskset-assign-public-ip/#identifier","title":"Identifier","text":"<p>ecs-enable-container-insights</p>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/#category","title":"Category","text":"<p>Protect &gt; Secure network configuration &gt; Resources not publicly accessible</p>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/#description","title":"Description","text":"<p>This control checks whether Amazon ECS task sets are configured to not assign public IPs. Assigning public IPs to ECS tasks can expose them directly to the internet, increasing the attack surface. This is verified by ensuring that <code>assign_public_ip</code> is set to <code>\"DISABLED\"</code> in the <code>network_configuration</code> block of the <code>aws_ecs_service</code> or <code>aws_ecs_task_set</code> Terraform resources.</p>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_ecs_task_set\" \"foo\" {\n    service         = aws_ecs_service.foo.id\n    cluster         = aws_ecs_cluster.foo.id\n    task_definition = aws_ecs_task_definition.foo.arn\n\n    launch_type      = \"FARGATE\"\n    network_configuration {\n    assign_public_ip = true\n    ...\n    }\n    ...\n}\n</code></pre>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/#remediation","title":"Remediation","text":"<p>To fix this violation, explicitly set <code>assign_public_ip</code> to <code>false</code> in the ECS service or task set configuration: Terraform<pre><code>resource \"aws_ecs_task_set\" \"foo\" {\n    service         = aws_ecs_service.foo.id\n    cluster         = aws_ecs_cluster.foo.id\n    task_definition = aws_ecs_task_definition.foo.arn\n\n    launch_type      = \"FARGATE\"\n    network_configuration {\n    assign_public_ip = false\n    ...\n    }\n    ...\n}\n</code></pre></p>"},{"location":"policies/ecs-disable-taskset-assign-public-ip/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-16 -https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_task_set#assign_public_ip</li> <li>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html</li> </ul>"},{"location":"policies/ecs-enable-container-insights/","title":"ECS clusters should use Container Insights","text":""},{"location":"policies/ecs-enable-container-insights/#identifier","title":"Identifier","text":"<p>ecs-enable-container-insights</p>"},{"location":"policies/ecs-enable-container-insights/#category","title":"Category","text":"<p>Identify &gt; Logging</p>"},{"location":"policies/ecs-enable-container-insights/#description","title":"Description","text":"<p>This control checks whether Amazon ECS clusters have Container Insights enabled. Container Insights provides detailed monitoring and troubleshooting information for ECS clusters and services via Amazon CloudWatch. Enabling Container Insights helps improve observability and operational efficiency. This is verified by checking that <code>settings</code> include <code>\"containerInsights\": \"enabled\"</code> in the Terraform configuration for the <code>aws_ecs_cluster</code> resource.</p>"},{"location":"policies/ecs-enable-container-insights/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_ecs_cluster\" \"foo\" {\n  name = \"foo-cluster\"\n}\n</code></pre>"},{"location":"policies/ecs-enable-container-insights/#remediation","title":"Remediation","text":"<p>To fix this violation, enable Container Insights by adding the <code>settings</code> block with <code>containerInsights</code> set to <code>\"enabled\"</code>: Terraform<pre><code>resource \"aws_ecs_cluster\" \"foo\" {\n  name = \"foo-cluster\"\n  setting {\n      name  = \"containerInsights\"\n      value = \"enabled\"\n  }\n}\n</code></pre></p>"},{"location":"policies/ecs-enable-container-insights/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/ecs-controls.html#ecs-12</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecs_cluster#setting</li> <li>https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContainerInsights.html</li> </ul>"},{"location":"policies/efs-enable-at-rest-encryption/","title":"Elastic File System should be configured to encrypt data at-rest using AWS KMS","text":""},{"location":"policies/efs-enable-at-rest-encryption/#identifier","title":"Identifier","text":"<p>efs-enable-at-rest-encryption</p>"},{"location":"policies/efs-enable-at-rest-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/efs-enable-at-rest-encryption/#description","title":"Description","text":"<p>This control checks whether an Amazon Elastic File System (EFS) is encrypted at rest, by verifying that the <code>encrypted</code> attribute is set to <code>true</code> and set <code>kms_key_id</code> in the Terraform configuration for the <code>aws_efs_file_system</code> resource.</p>"},{"location":"policies/efs-enable-at-rest-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_efs_file_system\" \"example\" {\n  creation_token = \"my-efs\"\n  encrypted      = false\n}\n</code></pre>"},{"location":"policies/efs-enable-at-rest-encryption/#remediation","title":"Remediation","text":"<p>To fix this violation, enable encryption at rest by setting the <code>encrypted</code> attribute to <code>true</code> and set <code>kms_key_id</code> in your Terraform configuration:</p> Terraform<pre><code> resource \"aws_efs_file_system\" \"good_example\" {\n   name       = \"bar\"\n   encrypted  = true\n   kms_key_id = \"kms_key_arn\"\n }\n</code></pre>"},{"location":"policies/efs-enable-at-rest-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/efs-controls.html#efs-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_file_system</li> <li>https://docs.aws.amazon.com/efs/latest/ug/encryption.html</li> </ul>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/","title":"ElastiCache clusters should have automatic minor version upgrades enabled","text":""},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#identifier","title":"Identifier","text":"<p>elasticache-enable-auto-minor-version-upgrade</p>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#description","title":"Description","text":"<p>This control checks whether Amazon ElastiCache replication groups have automatic minor version upgrades enabled. Enabling this setting ensures that ElastiCache nodes automatically receive minor engine version updates that contain important security patches, performance improvements, and bug fixes. Regular patching minimizes exposure to known vulnerabilities and reduces operational maintenance.</p> <p>This setting is controlled using <code>auto_minor_version_upgrade = true</code> in the <code>aws_elasticache_replication_group</code> or <code>aws_elasticache_cluster</code> Terraform resource.</p>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_elasticache_replication_group\" \"foo\" {\n  automatic_failover_enabled  = true\n  preferred_cache_cluster_azs = [\"us-east-1a\", \"us-east-1b\"]\n  replication_group_id        = \"group-1\"\n  description                 = \"example description\"\n  node_type                   = \"cache.m4.large\"\n  num_cache_clusters          = 2\n  parameter_group_name        = \"default.redis3.2\"\n  port                        = 6379\n  at_rest_encryption_enabled  = true\n  transit_encryption_enabled  = true\n  auto_minor_version_upgrade  = false\n}\n</code></pre>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#remediation","title":"Remediation","text":"<p>To fix this violation, enable automatic minor version upgrades by setting <code>auto_minor_version_upgrade = true</code>:</p> Terraform<pre><code>resource \"aws_elasticache_replication_group\" \"foo\" {\n  automatic_failover_enabled  = true\n  preferred_cache_cluster_azs = [\"us-east-1a\", \"us-east-1b\"]\n  replication_group_id        = \"group-1\"\n  description                 = \"example description\"\n  node_type                   = \"cache.m4.large\"\n  num_cache_clusters          = 2\n  parameter_group_name        = \"default.redis3.2\"\n  port                        = 6379\n  kms_key_id                  = kms_key_id\n  at_rest_encryption_enabled  = true\n  transit_encryption_enabled  = true\n  auto_minor_version_upgrade  = true\n}\n</code></pre>"},{"location":"policies/elasticache-enable-auto-minor-version-upgrade/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/elasticache-controls.html#elasticache-2</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_replication_group</li> <li>https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/VersionManagement.html</li> </ul>"},{"location":"policies/eventbridge-attach-resource-based-policy/","title":"EventBridge custom event buses should have a resource-based policy attached","text":""},{"location":"policies/eventbridge-attach-resource-based-policy/#identifier","title":"Identifier","text":"<p>eventbridge-attach-resource-based-policy</p>"},{"location":"policies/eventbridge-attach-resource-based-policy/#category","title":"Category","text":"<p>Protect &gt; Secure access management &gt; Resource not publicly accessible</p>"},{"location":"policies/eventbridge-attach-resource-based-policy/#description","title":"Description","text":"<p>This control checks whether Amazon EventBridge custom event buses have a resource-based policy attached using the <code>aws_cloudwatch_event_bus_policy</code> resource. Resource-based policies are essential for controlling who can send or receive events from your custom event bus, especially in cross-account scenarios.</p> <p>Attaching a policy ensures that only explicitly authorized principals can interact with your event bus, helping to enforce least privilege and protect sensitive event data.</p>"},{"location":"policies/eventbridge-attach-resource-based-policy/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_cloudwatch_event_bus\" \"foo\" {\n  name = \"messages\"\n}\n</code></pre>"},{"location":"policies/eventbridge-attach-resource-based-policy/#remediation","title":"Remediation","text":"<p>Use the <code>aws_cloudwatch_event_bus_policy</code> resource to attach a policy that defines access:</p> Terraform<pre><code>resource \"aws_cloudwatch_event_bus\" \"foo\" {\n  name = \"test-messages\"\n}\n\ndata \"aws_iam_policy_document\" \"foo\" {\n  statement {\n    sid    = \"DevAccountAccess\"\n    effect = \"Allow\"\n    actions = [\n      \"events:PutEvents\",\n    ]\n    resources = [\n      aws_cloudwatch_event_bus.foo.arn\n    ]\n\n    principals {\n      type        = \"AWS\"\n      identifiers = [local.account_id]\n    }\n  }\n}\n\nresource \"aws_cloudwatch_event_bus_policy\" \"foo\" {\n  policy         = data.aws_iam_policy_document.foo.json\n  event_bus_name = aws_cloudwatch_event_bus.foo.name\n}\n</code></pre>"},{"location":"policies/eventbridge-attach-resource-based-policy/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/eventbridge-controls.html#eventbridge-3</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_event_bus_policy</li> <li>https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus-perms.html#eb-event-bus-permissions-manage</li> </ul>"},{"location":"policies/firehose-enable-server-side-encryption/","title":"Firehose delivery streams should be encrypted at rest using AWS KMS","text":""},{"location":"policies/firehose-enable-server-side-encryption/#identifier","title":"Identifier","text":"<p>firehose-enable-server-side-encryption</p>"},{"location":"policies/firehose-enable-server-side-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/firehose-enable-server-side-encryption/#description","title":"Description","text":"<p>This control checks whether Amazon Kinesis Data Firehose delivery streams are encrypted at rest, by verifying that the <code>server_side_encryption</code> block is configured and <code>enabled</code> is set to <code>true</code> and set <code>kms_key_id</code> in the Terraform configuration for the <code>aws_kinesis_firehose_delivery_stream</code> resource.</p>"},{"location":"policies/firehose-enable-server-side-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_kinesis_firehose_delivery_stream\" \"foo\" {\n  destination = \"s3\"\n  name        = \"non-compliant\"\n}\n</code></pre>"},{"location":"policies/firehose-enable-server-side-encryption/#remediation","title":"Remediation","text":"<p>To fix this violation, configure server-side encryption by adding the <code>server_side_encryption</code> block and setting <code>enabled = true</code> and <code>key_arn</code>:</p> Terraform<pre><code>resource \"aws_kinesis_firehose_delivery_stream\" \"foo\" {\n  destination = \"s3\"\n  name        = \"compliant\"\n  server_side_encryption {\n    enabled  = true\n    key_type = \"CUSTOMER_MANAGED_CMK\"\n    key_arn  = key_arn\n  }\n}\n</code></pre>"},{"location":"policies/firehose-enable-server-side-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/datafirehose-controls.html#datafirehose-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_firehose_delivery_stream</li> <li>https://docs.aws.amazon.com/firehose/latest/dev/encryption.html</li> </ul>"},{"location":"policies/glue-spark-job-supported-version/","title":"AWS Glue Spark jobs should run on supported versions of AWS Glue","text":""},{"location":"policies/glue-spark-job-supported-version/#identifier","title":"Identifier","text":"<p>glue-spark-job-supported-version</p>"},{"location":"policies/glue-spark-job-supported-version/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/glue-spark-job-supported-version/#description","title":"Description","text":"<p>This control checks whether AWS Glue Spark jobs are configured to use supported and up-to-date Spark versions. Using supported versions ensures compatibility, stability, and security for your ETL workflows. This is verified by inspecting the <code>glue_version</code> attribute in the Terraform configuration for the <code>aws_glue_job</code> resource and confirming it matches one of the supported Glue Spark versions.</p>"},{"location":"policies/glue-spark-job-supported-version/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_glue_job\" \"foo\" {\n  name     = \"foo\"\n  glue_version = \"1.0\"\n  role_arn = aws_iam_role.example.arn\n\n  command {\n    script_location = \"s3://glue-bucket/example.py\"\n  }\n  ...\n}\n</code></pre>"},{"location":"policies/glue-spark-job-supported-version/#remediation","title":"Remediation","text":"<p>To fix this violation, update the glue_version attribute to a supported version such as \"3.0\", \"4.0\", or \"5.0\" depending on your requirements:</p> Terraform<pre><code>resource \"aws_glue_job\" \"foo\" {\n  name     = \"foo\"\n  glue_version = \"4.0\"\n  role_arn = aws_iam_role.example.arn\n\n  command {\n    script_location = \"s3://glue-bucket/example.py\"\n  }\n  ...\n}\n</code></pre>"},{"location":"policies/glue-spark-job-supported-version/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/glue-controls.html#glue-4</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/glue_job#glue_version-1</li> <li>https://docs.aws.amazon.com/glue/latest/dg/release-notes.html</li> </ul>"},{"location":"policies/kinesis-enable-server-side-encryption/","title":"Kinesis streams should be encrypted at rest","text":""},{"location":"policies/kinesis-enable-server-side-encryption/#identifier","title":"Identifier","text":"<p>kinesis-enable-server-side-encryption</p>"},{"location":"policies/kinesis-enable-server-side-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/kinesis-enable-server-side-encryption/#description","title":"Description","text":"<p>This control checks whether Amazon Kinesis Data Streams are encrypted at rest using AWS Key Management Service (KMS). Encryption ensures the data records in the stream are protected while stored. This is verified by checking that the <code>encryption_type</code> is set to <code>KMS</code> and a valid <code>kms_key_id</code> is configured in the Terraform configuration for the <code>aws_kinesis_stream</code> resource.</p>"},{"location":"policies/kinesis-enable-server-side-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_kinesis_stream\" \"foo\" {\n  name        = \"foo\"\n  shard_count = 1\n}\n</code></pre>"},{"location":"policies/kinesis-enable-server-side-encryption/#remediation","title":"Remediation","text":"<p>To remediate this issue, enable server-side encryption by setting <code>encryption_type = \"KMS\"</code> and specifying a valid KMS key in <code>kms_key_id</code>: Terraform<pre><code>resource \"aws_kinesis_stream\" \"foo\" {\n  name              = \"foo\"\n  encryption_type   = \"KMS\"\n  kms_key_id        = kms_key_id\n  shard_count       = 1\n}\n</code></pre></p>"},{"location":"policies/kinesis-enable-server-side-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/kinesis-controls.html#kinesis-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream</li> <li>https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html</li> </ul>"},{"location":"policies/kms-enable-key-rotation/","title":"AWS KMS key rotation should be enabled","text":""},{"location":"policies/kms-enable-key-rotation/#identifier","title":"Identifier","text":"<p>kms-enable-key-rotation</p>"},{"location":"policies/kms-enable-key-rotation/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/kms-enable-key-rotation/#description","title":"Description","text":"<p>This control checks whether AWS Key Management Service (KMS) Customer Master Keys (CMKs) have automatic key rotation enabled. Enabling key rotation helps improve security by periodically rotating cryptographic keys, reducing the risk of key compromise. This is verified by ensuring that the <code>enable_key_rotation</code> attribute is set to <code>true</code> in the Terraform configuration for the <code>aws_kms_key</code> resource.</p>"},{"location":"policies/kms-enable-key-rotation/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_kms_key\" \"foo\" {\n  description             = \"foo\"\n  deletion_window_in_days = 10\n}\n</code></pre>"},{"location":"policies/kms-enable-key-rotation/#remediation","title":"Remediation","text":"<p>To fix this violation, enable key rotation by setting the <code>enable_key_rotation</code> attribute to <code>true</code>: Terraform<pre><code>resource \"aws_kms_key\" \"foo\" {\n  description             = \"foo\"\n  deletion_window_in_days = 10\n  enable_key_rotation     = true\n}\n</code></pre></p>"},{"location":"policies/kms-enable-key-rotation/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/kms-controls.html#kms-4</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_key#enable_key_rotation</li> <li>https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html</li> </ul>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/","title":"Amazon MQ brokers should have automatic minor version upgrade enabled","text":""},{"location":"policies/mq-enable-auto-minor-version-upgrade/#identifier","title":"Identifier","text":"<p>mq-enable-auto-minor-version-upgrade</p>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/#description","title":"Description","text":"<p>This control checks whether Amazon MQ brokers have automatic minor version upgrades enabled. Enabling this feature ensures that brokers automatically receive minor software updates that include important security patches and bug fixes. Regular patching helps reduce the risk of known vulnerabilities and improves the stability of the messaging service.</p> <p>This setting is controlled by <code>auto_minor_version_upgrade = true</code> in the Terraform configuration of the <code>aws_mq_broker</code> resource.</p>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_mq_broker\" \"foo\" {\n  broker_name        = \"mq-broker\"\n  engine_type        = \"ActiveMQ\"\n  engine_version     = \"5.16.3\"\n  host_instance_type = \"mq.t3.medium\"\n  ...\n}\n</code></pre>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/#remediation","title":"Remediation","text":"<p>To fix this violation, enable automatic minor version upgrades by setting <code>auto_minor_version_upgrade = true</code>:</p> Terraform<pre><code>resource \"aws_mq_broker\" \"foo\" {\n  broker_name        = \"mq-broker\"\n  engine_type        = \"ActiveMQ\"\n  engine_version     = \"5.16.3\"\n  host_instance_type = \"mq.t3.medium\"\n  auto_minor_version_upgrade = true\n  ...\n}\n</code></pre>"},{"location":"policies/mq-enable-auto-minor-version-upgrade/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/mq-controls.html#mq-3</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/mq_broker#auto_minor_version_upgrade</li> <li>https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/upgrading-brokers.html#upgrading-brokers-automatic-upgrades</li> </ul>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/","title":"Neptune DB clusters should be configured to copy tags to snapshots","text":""},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#identifier","title":"Identifier","text":"<p>neptune-enable-copy-tags-to-snapshots</p>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#category","title":"Category","text":"<p>Identify &gt; Inventory &gt; Tagging</p>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#description","title":"Description","text":"<p>This control checks whether Amazon Neptune clusters have copy tags to snapshots enabled. When enabled, all tags from the cluster are automatically copied to any manual or automated snapshots. This helps maintain consistent metadata between the cluster and its backups, aiding in cost allocation, access control, and organization.</p> <p>The setting is controlled via <code>copy_tags_to_snapshot = true</code> in the Terraform <code>aws_neptune_cluster</code> resource.</p>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_neptune_cluster\" \"foo\" {\n  cluster_identifier                  = \"foo\"\n  engine                              = \"neptune\"\n  storage_encrypted                   = true\n  kms_key_arn                         = kms_key_arn\n  deletion_protection                 = true\n  backup_retention_period             = 5\n  preferred_backup_window             = \"07:00-09:00\"\n  iam_database_authentication_enabled = true\n  availability_zones                  = [\"us-east-1a\", \"us-east-1b\"]\n  skip_final_snapshot                 = true\n  copy_tags_to_snapshot               = false\n}\n</code></pre>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#remediation","title":"Remediation","text":"<p>To ensure tags are copied to snapshots, set <code>copy_tags_to_snapshot = true</code>:</p> Terraform<pre><code>resource \"aws_neptune_cluster\" \"foo\" {\n  cluster_identifier                  = \"foo\"\n  engine                              = \"neptune\"\n  storage_encrypted                   = true\n  kms_key_arn                         = kms_key_arn\n  deletion_protection                 = true\n  backup_retention_period             = 5\n  preferred_backup_window             = \"07:00-09:00\"\n  iam_database_authentication_enabled = true\n  availability_zones                  = [\"us-east-1a\", \"us-east-1b\"]\n  skip_final_snapshot                 = true\n  copy_tags_to_snapshot               = true\n}\n</code></pre>"},{"location":"policies/neptune-enable-copy-tags-to-snapshots/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/neptune-controls.html#neptune-8</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/neptune_cluster</li> <li>https://docs.aws.amazon.com/neptune/latest/userguide/tagging.html#tagging-overview</li> </ul>"},{"location":"policies/opensearch-enable-node-to-node-encryption/","title":"OpenSearch domains should encrypt data sent between nodes","text":""},{"location":"policies/opensearch-enable-node-to-node-encryption/#identifier","title":"Identifier","text":"<p>opensearch-enable-node-to-node-encryption</p>"},{"location":"policies/opensearch-enable-node-to-node-encryption/#category","title":"Category","text":"<p>Protect &gt; Data Protection &gt; Encryption of data-in-transit</p>"},{"location":"policies/opensearch-enable-node-to-node-encryption/#description","title":"Description","text":"<p>This control checks whether Amazon OpenSearch Service domains have node-to-node encryption enabled. Node-to-node encryption ensures that data transmitted between the nodes within an OpenSearch cluster is encrypted using Transport Layer Security (TLS). This helps protect sensitive data in transit within the cluster.</p> <p>Disabling node-to-node encryption may expose your data to potential interception or compromise within the VPC network.</p> <p>In Terraform, this is configured using the <code>node_to_node_encryption.enabled</code> attribute in the <code>aws_opensearch_domain</code> resource.</p>"},{"location":"policies/opensearch-enable-node-to-node-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_opensearch_domain\" \"foo\" {\n    domain_name    = \"foo\"\n    engine_version = \"OpenSearch_2.11\"\n\n    cluster_config {\n    instance_type = \"r4.large.search\"\n    }\n}\n</code></pre>"},{"location":"policies/opensearch-enable-node-to-node-encryption/#remediation","title":"Remediation","text":"<p>To enable secure communication between nodes, set <code>enabled = true</code> under <code>node_to_node_encryption</code>:</p> Terraform<pre><code>resource \"aws_opensearch_domain\" \"foo\" {\n    domain_name    = \"foo\"\n    engine_version = \"OpenSearch_2.11\"\n\n    cluster_config {\n    instance_type = \"r4.large.search\"\n    }\n    node_to_node_encryption {\n        enabled = true\n    }\n    ...\n}\n</code></pre>"},{"location":"policies/opensearch-enable-node-to-node-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/opensearch-controls.html#opensearch-3</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/opensearch_domain</li> <li>https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ntn.html#enabling-ntn{:target=\"_blank\" rel=\"nofollow noreferrer noopener\"</li> </ul>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/","title":"RDS automatic minor version upgrades should be enabled","text":""},{"location":"policies/rds-enable-auto-minor-version-upgrade/#identifier","title":"Identifier","text":"<p>rds-enable-auto-minor-version-upgrade</p>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/#description","title":"Description","text":"<p>This control checks whether Amazon Relational Database Service (RDS) instances have automatic minor version upgrades enabled. Enabling this setting ensures that your RDS instances automatically receive minor engine version updates, which include critical security patches, bug fixes, and performance improvements.</p> <p>This feature is especially important for reducing manual maintenance overhead and minimizing the risk of running outdated or vulnerable database software.</p>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_db_instance\" \"foo\" {\n    allocated_storage               = 10\n    db_name                         = \"foo\"\n    engine                          = \"mysql\"\n    engine_version                  = \"5.7\"\n    instance_class                  = \"db.t3.micro\"\n    username                        = \"foo\"\n    password                        = \"foobarbaz\"\n    parameter_group_name            = \"default.mysql5.7\"\n    auto_minor_version_upgrade      = false\n}\n</code></pre>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/#remediation","title":"Remediation","text":"<p>To fix this violation, enable automatic minor version upgrades by setting <code>auto_minor_version_upgrade = true</code>:</p> Terraform<pre><code>resource \"aws_db_instance\" \"foo\" {\n    allocated_storage               = 10\n    db_name                         = \"foo\"\n    engine                          = \"mysql\"\n    engine_version                  = \"5.7\"\n    instance_class                  = \"db.t3.micro\"\n    username                        = \"foo\"\n    password                        = \"foobarbaz\"\n    parameter_group_name            = \"default.mysql5.7\"\n    auto_minor_version_upgrade      = true\n}\n</code></pre>"},{"location":"policies/rds-enable-auto-minor-version-upgrade/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/rds-controls.html#rds-13</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#auto_minor_version_upgrade</li> <li>https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html</li> </ul>"},{"location":"policies/redshift-disable-public-access/","title":"Amazon Redshift clusters should prohibit public access","text":""},{"location":"policies/redshift-disable-public-access/#identifier","title":"Identifier","text":"<p>redshift-disable-public-access</p>"},{"location":"policies/redshift-disable-public-access/#category","title":"Category","text":"<p>Protect &gt; Secure network configuration &gt; Resources not publicly accessible</p>"},{"location":"policies/redshift-disable-public-access/#description","title":"Description","text":"<p>This control checks whether Amazon Redshift clusters are not publicly accessible. Disabling public access helps ensure that your data warehouse is only accessible from within a secure and trusted network, thereby reducing the risk of unauthorized access and data breaches.</p> <p>In Terraform, this is controlled by setting <code>publicly_accessible = false</code> in the <code>aws_redshift_cluster</code> resource. When <code>publicly_accessible</code> is set to <code>true</code>, the cluster receives a public IP address and can be accessed from outside the VPC, which is not recommended unless explicitly required and tightly controlled.</p>"},{"location":"policies/redshift-disable-public-access/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_redshift_cluster\" \"foo\" {\n    cluster_identifier      = \"foo\"\n    database_name           = \"mydb\"\n    master_username         = \"exampleuser\"\n    manage_master_password  = true\n    node_type               = \"dc1.large\"\n    cluster_type            = \"single-node\"\n    publicly_accessible     = true\n    ...\n}\n</code></pre>"},{"location":"policies/redshift-disable-public-access/#remediation","title":"Remediation","text":"<p>To fix this violation, set <code>publicly_accessible = false</code>:</p> Terraform<pre><code>resource \"aws_redshift_cluster\" \"foo\" {\n    cluster_identifier      = \"foo\"\n    database_name           = \"mydb\"\n    master_username         = \"exampleuser\"\n    manage_master_password  = true\n    node_type               = \"dc1.large\"\n    cluster_type            = \"single-node\"\n    publicly_accessible     = false\n    ...\n}\n</code></pre>"},{"location":"policies/redshift-disable-public-access/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/redshift-controls.html#redshift-1 -https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/redshift_cluster#publicly_accessible</li> <li>https://docs.aws.amazon.com/redshift/latest/mgmt/managing-clusters-console.html#modify-cluster</li> </ul>"},{"location":"policies/redshift-enable-version-upgrade/","title":"Amazon Redshift should have automatic upgrades to major versions enabled","text":""},{"location":"policies/redshift-enable-version-upgrade/#identifier","title":"Identifier","text":"<p>redshift-enable-version-upgrade</p>"},{"location":"policies/redshift-enable-version-upgrade/#category","title":"Category","text":"<p>Identify &gt; Vulnerability, patch, and version management</p>"},{"location":"policies/redshift-enable-version-upgrade/#description","title":"Description","text":"<p>This control checks whether Amazon Redshift clusters have automatic version upgrades enabled. Enabling automatic upgrades ensures that your Redshift clusters receive the latest minor engine version updates, which may include critical security patches, performance improvements, and bug fixes.</p> <p>Automatic version upgrades help maintain the security and stability of your data warehouse with minimal administrative overhead. This is controlled using the <code>allow_version_upgrade = true</code> setting in the <code>aws_redshift_cluster</code> Terraform resource.</p>"},{"location":"policies/redshift-enable-version-upgrade/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_redshift_cluster\" \"foo\" {\n    cluster_identifier     = \"foo\"\n    database_name          = \"mydb\"\n    node_type              = \"dc1.large\"\n    cluster_type           = \"single-node\"\n    master_username        = \"exampleuser\"\n    manage_master_password = true\n    allow_version_upgrade  = false\n    ...\n}\n</code></pre>"},{"location":"policies/redshift-enable-version-upgrade/#remediation","title":"Remediation","text":"<p>To enable automatic minor version upgrades, set <code>allow_version_upgrade = true</code>:</p> Terraform<pre><code>resource \"aws_redshift_cluster\" \"foo\" {\n    cluster_identifier     = \"tf-redshift-cluster\"\n    database_name          = \"mydb\"\n    node_type              = \"dc1.large\"\n    cluster_type           = \"single-node\"\n    master_username        = \"exampleuser\"\n    manage_master_password = true\n    allow_version_upgrade  = true\n    ...\n}\n</code></pre>"},{"location":"policies/redshift-enable-version-upgrade/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/redshift-controls.html#redshift-6</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/redshift_cluster#allow_version_upgrade</li> <li>https://docs.aws.amazon.com/redshift/latest/mgmt/managing-clusters-console.html#upgrade-release-version-cluster</li> </ul>"},{"location":"policies/sqs-enable-at-rest-encryption/","title":"Amazon SQS queues should be encrypted at rest","text":""},{"location":"policies/sqs-enable-at-rest-encryption/#identifier","title":"Identifier","text":"<p>sqs-enable-at-rest-encryption</p>"},{"location":"policies/sqs-enable-at-rest-encryption/#category","title":"Category","text":"<p>Protect &gt; Data protection &gt; Encryption of data at rest</p>"},{"location":"policies/sqs-enable-at-rest-encryption/#description","title":"Description","text":"<p>This control checks whether Amazon Simple Queue Service (SQS) queues are encrypted at rest using AWS Key Management Service (KMS). Encryption at rest protects the contents of SQS messages while stored, ensuring data confidentiality and compliance with security policies. This is verified by ensuring the <code>kms_master_key_id</code> attribute is set in the Terraform configuration for the <code>aws_sqs_queue</code> resource.</p>"},{"location":"policies/sqs-enable-at-rest-encryption/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_sqs_queue\" \"foo\" {\n    name = \"foo-queue\"\n}\n</code></pre>"},{"location":"policies/sqs-enable-at-rest-encryption/#remediation","title":"Remediation","text":"<p>To remediate this issue, enable encryption by specifying a valid KMS key ARN in the kms_master_key_id attribute:</p> Terraform<pre><code>resource \"aws_sqs_queue\" \"foo\" {\n    name              = \"foo\"\n    kms_master_key_id = \"kms_key_arn\"\n}\n</code></pre>"},{"location":"policies/sqs-enable-at-rest-encryption/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/sqs-controls.html#sqs-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue#kms_master_key_id</li> <li>https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html</li> </ul>"},{"location":"policies/stepfunction-enable-logging/","title":"Step Functions state machines should have logging turned on","text":""},{"location":"policies/stepfunction-enable-logging/#identifier","title":"Identifier","text":"<p>stepfunction-enable-logging</p>"},{"location":"policies/stepfunction-enable-logging/#category","title":"Category","text":"<p>Identify &gt; Logging</p>"},{"location":"policies/stepfunction-enable-logging/#description","title":"Description","text":"<p>This control checks whether AWS Step Functions have logging enabled to capture execution history, errors, and performance insights. Logging provides essential observability for workflows and helps in auditing, troubleshooting, and compliance. This is verified by ensuring the <code>logging_configuration</code> block is configured in the Terraform definition of the <code>aws_sfn_state_machine</code> resource.</p>"},{"location":"policies/stepfunction-enable-logging/#non-compliant-example","title":"Non Compliant Example","text":"Terraform<pre><code>resource \"aws_sfn_state_machine\" \"foo\" {\n  name       = \"my-state-machine\"\n  role_arn   = aws_iam_role.state_machine_role.arn\n  definition = &lt;&lt;EOF\n{\n  \"StartAt\": \"HelloWorld\",\n  \"States\": {\n    \"HelloWorld\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}\nEOF\n}\n</code></pre>"},{"location":"policies/stepfunction-enable-logging/#remediation","title":"Remediation","text":"<p>To fix this violation, enable logging by adding the <code>logging_configuration</code> block and specifying a valid CloudWatch Logs log group ARN: Terraform<pre><code>resource \"aws_sfn_state_machine\" \"foo\" {\n  name       = \"step-function\"\n  role_arn   = aws_iam_role.state_machine_role.arn\n  definition = &lt;&lt;EOF\n{\n  \"StartAt\": \"HelloWorld\",\n  \"States\": {\n    \"HelloWorld\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}\nEOF\n  logging_configuration {\n    log_destination        = \"${aws_cloudwatch_log_group.sfn_state_machine_log_group.arn}:*\"\n    include_execution_data = true\n    level                  = \"ALL\"\n  }\n  depends_on = [aws_cloudwatch_log_group.sfn_state_machine_log_group, aws_iam_role.state_machine_role]\n}\n\nresource \"aws_cloudwatch_log_group\" \"sfn_state_machine_log_group\" {\n  name              = \"step-function-log-group\"\n  retention_in_days = 30\n}\n</code></pre></p>"},{"location":"policies/stepfunction-enable-logging/#extra-resources","title":"Extra Resources","text":"<ul> <li>https://docs.aws.amazon.com/securityhub/latest/userguide/stepfunctions-controls.html#stepfunctions-1</li> <li>https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sfn_state_machine</li> <li>https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#monitoring-logging-configure</li> </ul>"}]}